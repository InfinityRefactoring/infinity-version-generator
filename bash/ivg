#!/bin/bash

set -e

IVG_VERSION="0.0.1-SNAPSHOT"

#Config properties
PROPERTY_WRITE_AUTHOR_NAME="ivg.write.author.name"
PROPERTY_WRITE_AUTHOR_EMAIL="ivg.write.author.email"
PROPERTY_WRITE_COMMITTER_NAME="ivg.write.committer.name"
PROPERTY_WRITE_COMMITTER_EMAIL="ivg.write.committer.email"
PROPERTY_VERSION_PROPERTIES_FILE="ivg.version.properties.file"
PROPERTY_SNAPSHOT="ivg.snapshot"
PROPERTY_VERSION_SUFFIX="ivg.version.suffix"
PROPERTY_VERBOSE="ivg.verbose"
PROPERTY_IVG_EXT_FILE="ivg.ext.file"

#Version properties
PROPERTY_PROJECT_VERSION="project.version"
PROPERTY_PROJECT_VERSION_TIME="project.version.time"
PROPERTY_PROJECT_VERSION_HASH="project.version.hash"
PROPERTY_PROJECT_VERSION_SUFFIX="project.version.suffix"

PROPERTY_GIT_COMMIT_TIME="git.commit.time"
PROPERTY_GIT_COMMIT_HASH_SHORT="git.commit.hash.short"
PROPERTY_GIT_COMMIT_HASH_FULL="git.commit.hash.full"
PROPERTY_GIT_COMMIT_SUBJECT="git.commit.subject"

PROPERTY_GIT_AUTHOR_NAME="git.author.name"
PROPERTY_GIT_AUTHOR_EMAIL="git.author.email"

PROPERTY_GIT_COMMITTER_NAME="git.committer.name"
PROPERTY_GIT_COMMITTER_EMAIL="git.committer.email"

#Default options
CONFIG_PROPERTIES_FILE="ivg.properties"
WRITE_AUTHOR_NAME=true
WRITE_AUTHOR_EMAIL=true
WRITE_COMMITTER_NAME=true
WRITE_COMMITTER_EMAIL=true
VERSION_PROPERTIES_FILE="src/main/resources/META-INF/source-code.properties"
SNAPSHOT=true
SNAPSHOT_SUFFIX="-SNAPSHOT"
VERSION_SUFFIX=""
ONLY_CHANGE_SUFFIX=false
IVG_EXT_FILE="ivg-ext"
PRIMARY_IVG_EXT_FILE="$(dirname "$0")/$IVG_EXT_FILE"
SECONDARY_IVG_EXT_FILE="$(pwd)/$IVG_EXT_FILE"
VERBOSE=false
TEMP_BRANCH_PREFIX="ivg/temp"

#Current options
writeAuthorName=$WRITE_AUTHOR_NAME
writeAuthorEmail=$WRITE_AUTHOR_EMAIL
writeCommitterName=$WRITE_COMMITTER_NAME
writeCommitterEmail=$WRITE_COMMITTER_EMAIL
versionPropertiesFile=$VERSION_PROPERTIES_FILE
snapshot=$SNAPSHOT
versionSuffix=$VERSION_SUFFIX
onlyChangeSuffix=$ONLY_CHANGE_SUFFIX
ivgExtFile=""
verbose=$VERBOSE

#Goals
GOAL_VERSION_VALIDATION="VERSION VALIDATION"
GOAL_VERSION_GENERATION="VERSION GENERATION"

validate=false
generate=false

showMessage() {
    messageType=$1
    message=$2

    if [ $messageType = "info" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
    elif [ $messageType = "warning" ]; then
        messageType="[\e[93m\e[1mWARNING\e[0m\e[39m]"
    elif [ $messageType = "success" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[92m\e[1m$message\e[0m\e[39m"
    elif [ $messageType = "error" ]; then
        messageType="[\e[91m\e[1mERROR\e[0m\e[39m]"
    elif [ $messageType = "fail" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[91m\e[1m$message\e[0m\e[39m"
    fi

    if [ "$3" = true ]
    then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi

    if [ "$1" = "error" ] || [ "$1" = "fail" ]; then
        echo -e "$messageType $message" 1>&2
    else
        echo -e "$messageType $message"
    fi

    if [ "$4" = true ]
    then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi
}

getBooleanValue() {
    if [ "$2" = $1 ]; then
        if [ "$4" == "" ]; then
            echo $3
        else
            echo $4
        fi
    elif [[ "$2" =~ ^$1=.* ]]; then
        value=$(echo $2 | cut -d '=' -f 2)
        if [ "$value" = "true" ]; then
            echo true
        elif [ "$value" = "false" ]; then
            echo false
        else
            showMessage "error" "invalid argument, use $1, $1=true or $1=false"
            exit 1
        fi
    fi
    echo $3
}

getStringValue() {
    if [[ "$2" = $1 ]] || [[ "$2" =~ ^$1=.* ]]; then
        if [[ $2 =~ ^$1=.* ]]; then
            value=$(echo $2 | cut -d '=' -f 2)
            if [ "$value" != "" ]; then
                echo "$value"
                exit 0
            fi
        fi
        showMessage "error" "invalid argument, use $4"
        exit 1
    fi
    echo $3
}

getProperty() {
    echo $(grep "^$1=" $2)
}

loadConfig() {
    if [ "$1" != "$configPropertiesFile" ]; then
        if [ -f "$1" ]; then
            if $verbose ; then
                showMessage "info" "Loading config from: \e[4m$1\e[24m"
            fi
            writeAuthorName=$(getBooleanValue "$PROPERTY_WRITE_AUTHOR_NAME" "$(getProperty "$PROPERTY_WRITE_AUTHOR_NAME" "$1")" "$writeAuthorName")
            writeAuthorEmail=$(getBooleanValue "$PROPERTY_WRITE_AUTHOR_EMAIL" "$(getProperty "$PROPERTY_WRITE_AUTHOR_EMAIL" "$1")" "$writeAuthorEmail")
            writeCommitterName=$(getBooleanValue "$PROPERTY_WRITE_COMMITTER_NAME" "$(getProperty "$PROPERTY_WRITE_COMMITTER_NAME" "$1")" "$writeCommitterName")
            writeCommitterEmail=$(getBooleanValue "$PROPERTY_WRITE_COMMITTER_EMAIL" "$(getProperty "$PROPERTY_WRITE_COMMITTER_EMAIL" "$1")" "$writeCommitterEmail")
            versionPropertiesFile=$(getStringValue "$PROPERTY_VERSION_PROPERTIES_FILE" "$(getProperty "$PROPERTY_VERSION_PROPERTIES_FILE" "$1")" "$versionPropertiesFile" "$PROPERTY_VERSION_PROPERTIES_FILE=$VERSION_PROPERTIES_FILE")
            snapshot=$(getBooleanValue "$PROPERTY_SNAPSHOT" "$(getProperty "$PROPERTY_SNAPSHOT" "$1")" "$snapshot")
            versionSuffix=$(getStringValue "$PROPERTY_VERSION_SUFFIX" "$(getProperty "$PROPERTY_VERSION_SUFFIX" "$1")" "$versionSuffix" "$PROPERTY_VERSION_SUFFIX=$SNAPSHOT_SUFFIX")
            ivgExtFile=$(getStringValue "$PROPERTY_IVG_EXT_FILE" "$(getProperty "$PROPERTY_IVG_EXT_FILE" "$1")" "$ivgExtFile" "$PROPERTY_IVG_EXT_FILE=$IVG_EXT_FILE")
            verbose=$(getBooleanValue "$PROPERTY_VERBOSE" "$(getProperty "$PROPERTY_VERBOSE" "$1")" "$verbose")
            configPropertiesFile="$1"
        else
            showMessage "error" "Not found the \e[4m$1\e[24m config properties file."
            exit 1
        fi
    fi
}

setProjectVersionInConfigFiles() {
    showMessage "warning" "No function defined to set the project version in the config files."
}

showMessage "info" "\e[1m\e[96mInfinity Version Generator (InfinityRefactoring/infinity-version-generator)\e[39m\e[0m" true true

if [ -f "$CONFIG_PROPERTIES_FILE" ]; then
    loadConfig "$CONFIG_PROPERTIES_FILE"
fi

if [ -f "$PRIMARY_IVG_EXT_FILE" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $PRIMARY_IVG_EXT_FILE"
    fi
    source "$PRIMARY_IVG_EXT_FILE"
fi

if [ -f "$SECONDARY_IVG_EXT_FILE" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $SECONDARY_IVG_EXT_FILE"
    fi
    source "$SECONDARY_IVG_EXT_FILE"
fi

for var in "$@"; do
    if [ "$var" = "--version" ]; then
        showMessage "info" "Version: $IVG_VERSION"
        exit 0
    elif [ "$var" = "-h" ] || [ "$var" = "--help" ]; then
        showMessage "info" "A flexible version generator for projects that uses the Git as control version."
        showMessage "info" "The generated version is based in the git commit time and the git commit hash and an optional suffix."
        showMessage "info"
        showMessage "info" "\e[1mUsage\e[0m:"
        showMessage "info" "    ivg [<goal>] [<options>]"
        showMessage "info" "    ivg [<options>] [<goal>]"
        showMessage "info"
        showMessage "info" "\e[1mExamples\e[0m:"
        showMessage "info" "    ivg g"
        showMessage "info" "    ivg v"
        showMessage "info" "    ivg generate --verbose"
        showMessage "info" "    ivg validate -s=false --verbose"
        showMessage "info"
        showMessage "info" "\e[1mGoals\e[0m:"
        showMessage "info" "v, validate           Validates the current project version with the version defined in the version properties file. Returns 0 if the project is valid otherwise 1."
        showMessage "info" "g, generate           Analyses the project and if necessary generates a new version number."
        showMessage "info"
        showMessage "info" "\e[1mOptions\e[0m:"
        showMessage "info" "Long options has priority over short options."
        showMessage "info" "-c                    The config properties file path"
        showMessage "info" "                          Default value: $CONFIG_PROPERTIES_FILE"
        showMessage "info" "                          Example: -c=$CONFIG_PROPERTIES_FILE"
        showMessage "info" "                          Config properties file example:"
        showMessage "info" "                              $PROPERTY_WRITE_AUTHOR_NAME=$WRITE_AUTHOR_NAME"
        showMessage "info" "                              $PROPERTY_WRITE_AUTHOR_EMAIL=$WRITE_AUTHOR_EMAIL"
        showMessage "info" "                              $PROPERTY_WRITE_COMMITTER_NAME=$WRITE_COMMITTER_NAME"
        showMessage "info" "                              $PROPERTY_WRITE_COMMITTER_EMAIL=$WRITE_COMMITTER_EMAIL"
        showMessage "info" "                              $PROPERTY_VERSION_PROPERTIES_FILE=$VERSION_PROPERTIES_FILE"
        showMessage "info" "                              $PROPERTY_SNAPSHOT=$SNAPSHOT"
        showMessage "info" "                              $PROPERTY_VERSION_SUFFIX=$SNAPSHOT_SUFFIX"
        showMessage "info" "                              $PROPERTY_IVG_EXT_FILE=$IVG_EXT_FILE"
        showMessage "info" "                              $PROPERTY_VERBOSE=$VERBOSE"
        showMessage "info" "--wan                 Writes the git author name in the version properties file"
        showMessage "info" "                          Default value: $WRITE_AUTHOR_NAME"
        showMessage "info" "                          Examples: --wan, --wan=false, --wan=true"
        showMessage "info" "--wae                 Writes the git author email in the version properties file"
        showMessage "info" "                          Default value: $WRITE_AUTHOR_EMAIL"
        showMessage "info" "                          Examples: --wae, --wae=false, --wae=true"
        showMessage "info" "--wcn                 Writes the git committer name in the version properties file"
        showMessage "info" "                          Default value: $WRITE_COMMITTER_NAME"
        showMessage "info" "                          Examples: --wcn, --wcn=false, --wcn=true"
        showMessage "info" "--wce                 Writes the git committer email in the version properties file"
        showMessage "info" "                          Default value: $WRITE_COMMITTER_EMAIL"
        showMessage "info" "                          Examples: --wce, --wce=false, --wce=true"
        showMessage "info" "-p                    The version properties file path"
        showMessage "info" "                          Default value: $VERSION_PROPERTIES_FILE"
        showMessage "info" "                          Example: -p=$VERSION_PROPERTIES_FILE"
        showMessage "info" "-s                    Enables the snapshot version suffix ($SNAPSHOT_SUFFIX)"
        showMessage "info" "                          Default value: $SNAPSHOT"
        showMessage "info" "                          Examples: -s, -s=false, -s=true"
        showMessage "info" "--suffix              The version number suffix" 
        showMessage "info" "                          Default value: $VERSION_SUFFIX"
        showMessage "info" "                          Example: --suffix=$SNAPSHOT_SUFFIX"
        showMessage "info" "--ocs                 Enables only the change in the version suffix" 
        showMessage "info" "                          Default value: $ONLY_CHANGE_SUFFIX"
        showMessage "info" "                          Example: --ocs, --ocs=false, --ocs=true"
        showMessage "info" "--import              The path of the script that will be imported. This is useful to import a custom implementation of the \"setProjectVersionInConfigFiles()\" function"
        showMessage "info" "                          Default values:"
        showMessage "info" "                              $PRIMARY_IVG_EXT_FILE"
        showMessage "info" "                              $SECONDARY_IVG_EXT_FILE"
        showMessage "info" "                          Example: --import=$IVG_EXT_FILE"
        showMessage "info" "--verbose             Enable the verbose mode"
        showMessage "info" "                          Examples: --verbose, --verbose=false, --verbose=true"
        showMessage "info" "--version             Display the version information and exit"
        showMessage "info" "-h, --help            Display this help and exit"
        showMessage "info"
        showMessage "info" "\e[1mhttps://github.com/InfinityRefactoring/infinity-version-generator\e[0m"
        exit 0
    else
        validate=$(getBooleanValue $var "v" $validate true)
        validate=$(getBooleanValue $var "validate" $validate true)
        generate=$(getBooleanValue $var "g" $generate true)
        generate=$(getBooleanValue $var "generate" $generate true)
        loadConfig $(getStringValue "-c" $var $configPropertiesFile)
        writeAuthorName=$(getBooleanValue "--wan" $var $writeAuthorName)
        writeAuthorEmail=$(getBooleanValue "--wae" $var $writeAuthorEmail)
        writeCommitterName=$(getBooleanValue "--wcn" $var $writeCommitterName)
        writeCommitterEmail=$(getBooleanValue "--wce" $var $writeCommitterEmail)
        versionPropertiesFile=$(getStringValue "-p" $var "$versionPropertiesFile" "-p=$VERSION_PROPERTIES_FILE")
        snapshot=$(getBooleanValue "-s" $var $snapshot)
        versionSuffix=$(getStringValue "--suffix" $var $versionSuffix)
        onlyChangeSuffix=$(getBooleanValue "--ocs" $var $onlyChangeSuffix true)
        ivgExtFile=$(getStringValue "--import" $var $ivgExtFile)
        verbose=$(getBooleanValue "--verbose" $var $verbose true)
    fi
done

if [ "$ivgExtFile" != "" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $ivgExtFile"
    fi
    source "$ivgExtFile"
fi

if ! $validate && ! $generate ; then
    showMessage "error" "No goal enabled."
    exit 1
elif $generate ; then
    goal=$GOAL_VERSION_GENERATION
else
    goal=$GOAL_VERSION_VALIDATION
fi

if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] && $onlyChangeSuffix ; then
    showMessage "error" "The argument --ocs only is available in the generation goal."
    exit 1
fi

showMessage "info" "Goal: \e[1m$goal\e[0m"
showMessage "info" "Project directory: $(pwd)"

if [ ! -d ".git" ]; then
    showMessage "error" "The current directory is not a git repository."
    exit 1
fi

currentBranch=$(git branch | grep \* | cut -d ' ' -f 2)

showMessage "info" "Current git branch: \e[1m$currentBranch\e[0m"

gitStatus=$(git status --short)

if [ "$gitStatus" != "" ]; then
    showMessage "error" "The project has uncommitted changes, commit before run it."
    if $verbose ; then
        git status
    fi
    exit 1
fi

formatVersion() {
    echo "$1.$2$3"
}

versionTime=$(TZ=UTC git show --quiet --date='format-local:%Y.%m.%d.%H.%M.%S' --format="%cd")
versionHash=$(git show --quiet --format="%h")

if $snapshot && [ "$versionSuffix" = "" ]; then
    versionSuffix="$SNAPSHOT_SUFFIX"
fi

version=$(formatVersion $versionTime $versionHash $versionSuffix)

loadGitInfo() {
    gitCommitTime=$(git show --quiet --format="%ci")
    gitCommitHashShort=$(git show --quiet --format="%h")
    gitCommitHashFull=$(git show --quiet --format="%H")
    gitCommitSubject=$(git show --quiet --format="%s")

    gitAuthorName=$(git show --quiet --format="%an")
    gitAuthorEmail=$(git show --quiet --format="%ae")

    gitCommitterName=$(git show --quiet --format="%cn")
    gitCommitterEmail=$(git show --quiet --format="%ce")
}

createVersionPropertiesFile() {
    mkdir -p $(dirname "$versionPropertiesFile")
    echo "#Auto generated by Infinity Version Generator (InfinityRefactoring/infinity-version-generator), do not edit this file" > "$versionPropertiesFile"
    echo "" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION=$v" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_TIME=$1" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_HASH=$2" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_SUFFIX=$3" >> "$versionPropertiesFile"
    echo "" >> "$versionPropertiesFile"
    echo "$PROPERTY_GIT_COMMIT_TIME=$gitCommitTime" >> "$versionPropertiesFile"
    echo "$PROPERTY_GIT_COMMIT_HASH_SHORT=$gitCommitHashShort" >> "$versionPropertiesFile"
    echo "$PROPERTY_GIT_COMMIT_HASH_FULL=$gitCommitHashFull" >> "$versionPropertiesFile"
    echo "$PROPERTY_GIT_COMMIT_SUBJECT=$gitCommitSubject" >> "$versionPropertiesFile"
    echo "" >> "$versionPropertiesFile"

    if $writeAuthorName ; then
        echo "$PROPERTY_GIT_AUTHOR_NAME=$gitAuthorName" >> "$versionPropertiesFile"
    fi
    
    if $writeAuthorEmail ; then
        echo "$PROPERTY_GIT_AUTHOR_EMAIL=$gitAuthorEmail" >> "$versionPropertiesFile"
    fi

    if $writeAuthorName || $writeAuthorEmail ; then
        echo "" >> "$versionPropertiesFile"
    fi

    if $writeCommitterName ; then
        echo "$PROPERTY_GIT_COMMITTER_NAME=$gitCommitterName" >> "$versionPropertiesFile"
    fi

    if $writeCommitterEmail ; then
        echo "$PROPERTY_GIT_COMMITTER_EMAIL=$gitCommitterEmail" >> "$versionPropertiesFile"
    fi
}

setProjectVersion() {
    v=$(formatVersion $1 $2 $3)
    setProjectVersionInConfigFiles "$verbose" "$v"
    
    createVersionPropertiesFile $1 $2 $3
    
    if $verbose ; then
        git add .
        git commit --amend --no-edit
    else
        {
            git add .
            git commit --amend --no-edit
        } 1>&- 2>&-
    fi
}

if [ -f "$versionPropertiesFile" ]; then
    getPropertyValue() {
        echo $(grep "^$1=" $2 | cut -d'=' -f 2)
    }

    savedVersion=$(getPropertyValue "$PROPERTY_PROJECT_VERSION" "$versionPropertiesFile")
    savedVersionTime=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_TIME" "$versionPropertiesFile")
    savedVersionHash=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_HASH" "$versionPropertiesFile")
    savedVersionSuffix=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_SUFFIX" "$versionPropertiesFile")

    savedGitCommitTime=$(getPropertyValue "$PROPERTY_GIT_COMMIT_TIME" "$versionPropertiesFile")
    savedGitCommitHashShort=$(getPropertyValue "$PROPERTY_GIT_COMMIT_HASH_SHORT" "$versionPropertiesFile")
    savedGitCommitHashFull=$(getPropertyValue "$PROPERTY_GIT_COMMIT_HASH_FULL" "$versionPropertiesFile")
    savedGitCommitSubject=$(getPropertyValue "$PROPERTY_GIT_COMMIT_SUBJECT" "$versionPropertiesFile")
    
    savedGitAuthorName=$(getPropertyValue "$PROPERTY_GIT_AUTHOR_NAME" "$versionPropertiesFile")
    savedGitAuthorEmail=$(getPropertyValue "$PROPERTY_GIT_AUTHOR_EMAIL" "$versionPropertiesFile")

    savedGitCommitterName=$(getPropertyValue "$PROPERTY_GIT_COMMITTER_NAME" "$versionPropertiesFile")
    savedGitCommitterEmail=$(getPropertyValue "$PROPERTY_GIT_COMMITTER_EMAIL" "$versionPropertiesFile")

    if [ "$savedVersion" != "" ] && [ "$savedVersionTime" != "" ] && [ "$savedVersionHash" != "" ] && [ "$savedGitCommitHashFull" != "" ]; then
        showMessage "info" "Saved version: \e[1m$savedVersion" true
        showMessage "info" "Saved commit: \e[1m$savedGitCommitHashFull" false true

        tempBranch="$TEMP_BRANCH_PREFIX$(date +%s)"

        if $verbose ; then
            git checkout -b $tempBranch $savedGitCommitHashFull
        else
            git checkout -b $tempBranch $savedGitCommitHashFull >&- 2>&-
        fi

        loadGitInfo

        if $onlyChangeSuffix ; then
            setProjectVersion $savedVersionTime $savedVersionHash $savedVersionSuffix
        else
            setProjectVersion $savedVersionTime $savedVersionHash $versionSuffix
        fi

        showMessage "info" "Checking differences between saved version and head..."

        set +e
        if $verbose ; then
            git diff --exit-code $currentBranch $tempBranch
        else
            git diff --exit-code $currentBranch $tempBranch >&- 2>&-
        fi
        hasChanges=$?
        set -e

        if [ $hasChanges -eq 0 ]; then
            hasChanges=false
            showMessage "info" "No changes."
        else
            hasChanges=true
            if $verbose ; then
                showMessage "info" "Found changes."
            else
                showMessage "info" "Found changes. Enable the verbose mode to see the difference."
            fi
        fi

        if $verbose ; then
            git checkout $currentBranch
            git branch -D $tempBranch
        else 
            {
                git checkout $currentBranch
                git branch -D $tempBranch
            } >&- 2>&-
        fi

        if $hasChanges ; then
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "fail" "$GOAL_VERSION_VALIDATION FAILED" true true
                exit 1
            elif $onlyChangeSuffix ; then
                showMessage "error" "Cannot is possible change only the version suffix, because was found changes."
                showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
                exit 1
            fi
        else
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "success" "$GOAL_VERSION_VALIDATION SUCCESS" true true
                exit 0
            elif $onlyChangeSuffix && [ "$savedVersion" != "$(formatVersion $savedVersionTime $savedVersionHash $versionSuffix)" ] ; then
                versionTime=$savedVersionTime
                versionHash=$savedVersionHash
                version=$(formatVersion $savedVersionTime $savedVersionHash $versionSuffix)

                gitCommitTime=$savedGitCommitTime
                gitCommitHashShort=$savedGitCommitHashShort
                gitCommitHashFull=$savedGitCommitHashFull
                gitCommitSubject=$savedGitCommitSubject

                gitAuthorName=$savedGitAuthorName
                gitAuthorEmail=$savedGitAuthorEmail

                gitCommitterName=$savedGitCommitterName
                gitCommitterEmail=$savedGitCommitterEmail
            else
                showMessage "success" "$GOAL_VERSION_GENERATION SKIPPED" true true
                exit 0
            fi
        fi
    else
        showMessage "warning" "The \e[4m$versionPropertiesFile\e[24m version properties file is corrupted. This file is generated automatically, do not edit it."
        if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
            showMessage "fail" "$GOAL_VERSION_VALIDATION FAILED" true true
            exit 1
        fi
    fi
else
    if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
        showMessage "info" "Not found the \e[4m$versionPropertiesFile\e[24m version properties file."
        showMessage "fail" "$GOAL_VERSION_VALIDATION FAILED" true true
        exit 1
    elif $onlyChangeSuffix ; then
        showMessage "error" "Cannot is possible change only the version suffix, because was not found the \e[4m$versionPropertiesFile\e[24m version properties file."
        showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
        exit 1
    fi
fi

if ! $onlyChangeSuffix ; then
    loadGitInfo
fi

showMessage "info" "Generating new version: \e[1m$version\e[0m"

setProjectVersion $versionTime $versionHash $versionSuffix

showMessage "success" "$GOAL_VERSION_GENERATION SUCCESS" true true