#!/bin/bash

set -e

IVG_VERSION="0.0.1-SNAPSHOT"

IVG_PATH="$0"
IVG_DIR="$(dirname "$IVG_PATH")"

source "$IVG_DIR/ivg-config"

#Current config
gitCommitMessage=$GIT_COMMIT_MESSAGE
fixup=$FIXUP
autosquash=$AUTOSQUASH
push=$PUSH
pushOrigin=$PUSH_ORIGIN
pushBranch=$PUSH_BRANCH
pushOptions=$PUSH_OPTIONS
versionSuffix=$VERSION_SUFFIX
onlyChangeSuffix=$ONLY_CHANGE_SUFFIX
strict=$STRICT
propertiesFile=$PROPERTIES_FILE
useErrorExitCode=$USE_ERROR_EXIT_CODE
quiet=$QUIET
verbose=$VERBOSE
SHOW_MESSAGE_HEADER=true

#Goals
GOAL_VERSION_VALIDATION="VERSION VALIDATION"
GOAL_VERSION_GENERATION="VERSION GENERATION"
GOAL_GET_VERSION="GET VERSION"
GOAL_GET_VERSION_REFERENCE="GET VERSION REFERENCE"

showMessage() {
    if $SHOW_MESSAGE_HEADER ; then
        SHOW_MESSAGE_HEADER=false
        showMessage "info" "\e[1m\e[96mInfinity Version Generator (InfinityRefactoring/infinity-version-generator)\e[39m\e[0m" true true
    fi
    messageType=$1
    message=$2

    if [ $messageType = "info" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
    elif [ $messageType = "warning" ]; then
        messageType="[\e[93m\e[1mWARNING\e[0m\e[39m]"
    elif [ $messageType = "success" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[92m\e[1m$message\e[0m\e[39m"
    elif [ $messageType = "error" ]; then
        messageType="[\e[91m\e[1mERROR\e[0m\e[39m]"
    elif [ $messageType = "fail" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[91m\e[1m$message\e[0m\e[39m"
    fi

    if [ "$3" = true ] && ! $quiet ; then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi

    if [ "$1" = "error" ] || [ "$1" = "fail" ]; then
        echo -e "$messageType $message" 1>&2
    elif ! $quiet ; then
        echo -e "$messageType $message"
    fi

    if [ "$4" = true ] && ! $quiet ; then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi
}

getBooleanValue() {
    if [ "$2" = "$1" ]; then
        if [ "$4" == "" ]; then
            echo $3
        else
            echo $4
        fi
    elif [[ "$2" =~ ^$1=.* ]]; then
        value=$(echo $2 | cut -d '=' -f 2)
        if [ "$value" = "true" ]; then
            echo true
        elif [ "$value" = "false" ]; then
            echo false
        else
            showMessage "error" "invalid argument, use $1, $1=true or $1=false"
            exit 1
        fi
    fi
    echo $3
}

getStringValue() {
    if [[ "$2" = $1 ]] || [[ "$2" =~ ^$1=.* ]]; then
        if [[ $2 =~ ^$1=.* ]]; then
            value=$(echo $2 | cut -d '=' -f 2)
            if [ "$value" != "" ]; then
                echo "$value"
                exit 0
            fi
        fi
        showMessage "error" "invalid argument, use $4"
        exit 1
    fi
    echo $3
}

getProperty() {
    echo $(grep "^$1=" $2)
}

getPropertyValue() {
    echo $(grep "^$1=" $2 | cut -d'=' -f 2)
}

getProjectVersion() {
    showMessage "error" "No defined function to get the project version."
    exit 1
}

setProjectVersion() {
    showMessage "warning" "No defined function to set the project version."
}

getVersionReference() {
    echo $(git rev-list --since="$1" HEAD | tail -n 1)
}

formatVersion() {
    echo "$1$2"
}

loadGitInfo() {
    gitCommitTime=$(git show --quiet --format="%ci")
}

createPropertiesFile() {
    mkdir -p $(dirname "$propertiesFile")
    echo "#Auto generated by Infinity Version Generator (InfinityRefactoring/infinity-version-generator), do not edit this file" > "$propertiesFile"
    echo "" >> "$propertiesFile"
    echo "$PROPERTY_PROJECT_VERSION=$v" >> "$propertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_TIME=$1" >> "$propertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_SUFFIX=$2" >> "$propertiesFile"
    echo "$PROPERTY_GIT_COMMIT_TIME=$gitCommitTime" >> "$propertiesFile"
}

hasUncommittedChanges() {
    if [ "$(git status --short)" = "" ]; then
        echo false
    else
        echo true
    fi
}

commitChanges() {
    if [ "$(hasUncommittedChanges)" = "true" ]; then
        git add .
        if $fixup ; then
            git commit --fixup HEAD
        else
            git commit -m "${gitCommitMessage/$VERSION_PATTERN/$v}"
        fi
    fi
}

saveProjectVersion() {
    v=$(formatVersion $1 $2)

    createPropertiesFile $1 $2
    
    setProjectVersion "$verbose" "$v"

    if $verbose ; then
       commitChanges
    else
        {
            commitChanges
        } 1>&-
    fi
}

importExtension() {
    if [ "$1" != "" ] && [ "$loadedExtension" != "true" ]; then
        ivgExtFile="$1"
        required="$2"
        if [ "$IVG_PATH" = "$ivgExtFile" ]; then
            showMessage "error" "The extension script path is equal to the ivg path ($IVG_PATH)"
            exit 1
        elif [ -f "$ivgExtFile" ]; then
            if $verbose ; then
                showMessage "info" "Importing script from: $ivgExtFile"
            fi
            source "$ivgExtFile"
            loadedExtension=true
        fi
    fi
}

importExtension "$IVG_EXT_DIR/$IVG_EXT_FILE_DEFAULT"
importExtension "$(pwd)/$IVG_EXT_FILE"
importExtension "$IVG_EXT_DIR/$IVG_EXT_FILE"

for var in "$@"; do
    if [ "$var" = "--version" ]; then
        showMessage "info" "Version: $IVG_VERSION"
        exit 0
    elif [ "$var" = "-h" ] || [ "$var" = "--help" ]; then
        quiet=false
        showMessage "info" "A flexible version generator for projects that uses the Git as control version."
        showMessage "info" "The generated version is based in the git commit time and an optional suffix."
        showMessage "info"
        showMessage "info" "\e[1mUsage\e[0m:"
        showMessage "info" "    ivg [<goal>] [<options>]"
        showMessage "info" "    ivg [<options>] [<goal>]"
        showMessage "info"
        showMessage "info" "\e[1mExamples\e[0m:"
        showMessage "info" "    ivg generate"
        showMessage "info" "    ivg validate"
        showMessage "info" "    ivg get-version"
        showMessage "info" "    ivg get-reference"
        showMessage "info" "    ivg generate --verbose"
        showMessage "info" "    ivg validate --suffix=-SNAPSHOT --verbose"
        showMessage "info"
        showMessage "info" "\e[1mGoals\e[0m:"
        showMessage "info" "validate                  Validates the current project version with the version defined in the version properties file. Returns 0 if the project is valid otherwise 1."
        showMessage "info" "generate                  Analyses the project and if necessary generates a new version number."
        showMessage "info" "get-version               Returns the current project version."
        showMessage "info" "get-reference             Returns the git commit hash that is reference to the current version."
        showMessage "info"
        showMessage "info" "\e[1mOptions\e[0m:"
        showMessage "info" "Long options has priority over short options."
        showMessage "info" "--import                  The path of the extension script that will be imported."
        showMessage "info" "                          This is useful to import a custom implementation of the \"getProjectVersion()\" and \"setProjectVersion()\" functions"
        showMessage "info" "                              Default values:"
        if [ "$IVG_EXT_FILE_DEFAULT" != "$IVG_EXT_FILE" ]; then
            showMessage "info" "                                  $(pwd)/$IVG_EXT_FILE"
        fi
        showMessage "info" "                                  $(pwd)/$IVG_EXT_FILE_DEFAULT"
        showMessage "info" "                                  $IVG_EXT_DIR/$IVG_EXT_FILE_DEFAULT"
        showMessage "info" "                              Example: --import=$IVG_EXT_FILE"
        showMessage "info" "                              Available extension scripts:"

        for ext in $IVG_EXT_DIR/*
        do
            if [ -f $ext ]; then
                showMessage "info" "                                  --import=$(basename "$ext")"
            fi
        done

        showMessage "info" "--commit-message          The git commit message. The pattern \"$VERSION_PATTERN\" will be override by the version number" 
        showMessage "info" "                              Default value: $GIT_COMMIT_MESSAGE"
        showMessage "info" "                              Example: --commit-message=$GIT_COMMIT_MESSAGE"
        showMessage "info" "--fixup                   Enable the use of the \"git commit --fixup\" command to commit the changes"
        showMessage "info" "                              Default value: $FIXUP"
        showMessage "info" "                              Example: --fixup, --fixup=false, --fixup=true"
        showMessage "info" "--autosquash              Enable the use of the \"git rebase -i --autosquash\" command to join the new commit with the previous commit. This only is enabled if the \"--fixup\" too is enabled"
        showMessage "info" "                              Default value: $FIXUP"
        showMessage "info" "                              Example: --autosquash, --autosquash=false, --autosquash=true"
        showMessage "info" "--push                    Execute the \"git push\" command if a new version is generated"
        showMessage "info" "                              Default value: $PUSH"
        showMessage "info" "                              Example: --push, --push=false, --push=true"
        showMessage "info" "--push-origin             The origin that will be used to push the changes"
        showMessage "info" "                              Default value: $PUSH_ORIGIN"
        showMessage "info" "                              Example: --push-origin=$PUSH_ORIGIN"
        showMessage "info" "--push-branch             The origin branch that will be used to push the changes"
        showMessage "info" "                              Default value: $PUSH_BRANCH"
        showMessage "info" "                              Example: --push-branch=master"
        showMessage "info" "--push-options            The options that will be used to push the changes"
        showMessage "info" "                              Default value: $PUSH_OPTIONS"
        showMessage "info" "                              Example: --push-options=-u"
        showMessage "info" "--suffix                  The version number suffix"
        showMessage "info" "                              Default value: $VERSION_SUFFIX"
        showMessage "info" "                              Example: --suffix=some-suffix"
        showMessage "info" "--only-change-suffix      Enables only the change in the version suffix" 
        showMessage "info" "                              Default value: $ONLY_CHANGE_SUFFIX"
        showMessage "info" "                              Example: --only-change-suffix, --only-change-suffix=false, --only-change-suffix=true"
        showMessage "info" "--strict                  Enable the strict mode"
        showMessage "info" "                              Default value: $STRICT"
        showMessage "info" "                              Example: --strict, --strict=false, --strict=true"
        showMessage "info" "--properties-file         The version properties file path"
        showMessage "info" "                              Default value: $PROPERTIES_FILE"
        showMessage "info" "                              Example: --properties-file=$PROPERTIES_FILE"
        showMessage "info" "--use-error-exit-code     (Only works in the generate goal) Returns the exit code 1 if the generation has been success"
        showMessage "info" "                              Default value: $useErrorExitCode"
        showMessage "info" "                              Example: --use-error-exit-code, --use-error-exit-code=false, --use-error-exit-code=true"
        showMessage "info" "--quiet                   Disable the messages"
        showMessage "info" "                              Default value: $QUIET"
        showMessage "info" "                              Example: --quiet, --quiet=false, --quiet=true"
        showMessage "info" "--verbose                 Enable the verbose mode"
        showMessage "info" "                              Examples: --verbose, --verbose=false, --verbose=true"
        showMessage "info" "--version                 Display the version information and exit"
        showMessage "info" "-h, --help                Display this help and exit"
        showMessage "info"
        showMessage "info" "\e[1mhttps://github.com/InfinityRefactoring/infinity-version-generator\e[0m"
        exit 0
    elif [ "$var" = "generate" ]; then
        goal=$GOAL_VERSION_GENERATION
    elif [ "$var" = "validate" ]; then
        goal=$GOAL_VERSION_VALIDATION
    elif [ "$var" = "get-version" ]; then
        goal=$GOAL_GET_VERSION
    elif [ "$var" = "get-reference" ]; then
        goal=$GOAL_GET_VERSION_REFERENCE
    else
        quiet=$(getBooleanValue "--quiet" "$var" $quiet true)
        ivgExtFile2=$(getStringValue "--import" "$var" "$ivgExtFile2" "--import=$IVG_EXT_FILE")
        gitCommitMessage=$(getStringValue "--commit-message" "$var" "$gitCommitMessage" "--commit-message=$GIT_COMMIT_MESSAGE")
        fixup=$(getBooleanValue "--fixup" "$var" $fixup true)
        autosquash=$(getBooleanValue "--autosquash" "$var" $autosquash true)
        push=$(getBooleanValue "--push" "$var" $push true)
        pushOrigin=$(getStringValue "--push-origin" "$var" "$pushOrigin" "--push-origin=$PUSH_ORIGIN")
        pushBranch=$(getStringValue "--push-branch" "$var" "$pushBranch" "--push-branch=master")
        pushOptions=$(getStringValue "--push-options" "$var" "$pushOptions" "--push-options=$PUSH_OPTIONS")
        versionSuffix=$(getStringValue "--suffix" "$var" "$versionSuffix" "--suffix=-some-suffix")
        onlyChangeSuffix=$(getBooleanValue "--only-change-suffix" "$var" $onlyChangeSuffix true)
        strict=$(getBooleanValue "--strict" "$var" $strict true)
        propertiesFile=$(getStringValue "--properties-file" $var "$propertiesFile" "--properties-file=$PROPERTIES_FILE")
        useErrorExitCode=$(getBooleanValue "--use-error-exit-code" "$var" $useErrorExitCode true)
        verbose=$(getBooleanValue "--verbose" "$var" $verbose true)
    fi
done

if [ "$ivgExtFile2" != "" ]; then
    loadedExtension=false
    if [[ "$ivgExtFile2" =~ ^\/.* ]]; then
        importExtension "$ivgExtFile2"
    else
        importExtension "$(pwd)/$ivgExtFile2"
        importExtension "$IVG_EXT_DIR/$ivgExtFile2"
    fi
fi

if [ "$loadedExtension" != "true" ]; then
    showMessage "error" "No extension script was loaded."
    exit 1
fi

if [ "$goal" = "" ] ; then
    showMessage "error" "No goal enabled."
    exit 1
fi

if [ "$goal" = "$GOAL_GET_VERSION" ] ; then
    getProjectVersion
    exit 0
fi

if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] && $onlyChangeSuffix ; then
    showMessage "error" "The argument --only-change-suffix only is available in the generation goal."
    exit 1
fi

showMessage "info" "Goal: \e[1m$goal\e[0m"
showMessage "info" "Project directory: $(pwd)"

if [ ! -d ".git" ]; then
    showMessage "error" "The current directory is not a git repository."
    exit 1
fi

currentBranch=$(git rev-parse --abbrev-ref HEAD)

if [ "$currentBranch" = "HEAD" ]; then
    currentBranch=$(git rev-parse HEAD)
fi

showMessage "info" "Current git branch: \e[1m$currentBranch\e[0m"

if [ "$(hasUncommittedChanges)" = "true" ]; then
    showMessage "error" "The project has uncommitted changes, commit before run it."
    if $verbose ; then
        git status
    fi
    exit 1
fi

versionTime=$(TZ=UTC git show --quiet --date="$VERSION_TIME_FORMAT" --format="%cd")
version=$(formatVersion $versionTime $versionSuffix)

if [ -f "$propertiesFile" ]; then
    savedVersion=$(getPropertyValue "$PROPERTY_PROJECT_VERSION" "$propertiesFile")
    savedVersionTime=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_TIME" "$propertiesFile")
    savedVersionSuffix=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_SUFFIX" "$propertiesFile")
    savedGitCommitTime=$(getPropertyValue "$PROPERTY_GIT_COMMIT_TIME" "$propertiesFile")

    if [ "$savedVersion" != "" ] && [ "$savedVersionTime" != "" ] && [ "$savedGitCommitTime" != "" ]; then
        versionReference=$(getVersionReference "$savedGitCommitTime")
        
        if [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
            echo $versionReference
            exit 0
        fi

        showMessage "info" "Saved version: \e[1m$savedVersion" true
        showMessage "info" "Version reference: \e[1m$versionReference" false true

        tempBranch="$TEMP_BRANCH_PREFIX$(date +%s)"

        git checkout -q -b "$tempBranch" "$versionReference"

        loadGitInfo

        if ! $strict ; then
            gitCommitTime="$savedGitCommitTime"
        fi

        if $onlyChangeSuffix ; then
            saveProjectVersion "$savedVersionTime" "$savedVersionSuffix"
        else
            saveProjectVersion "$savedVersionTime" "$versionSuffix"
        fi

        showMessage "info" "Checking differences between saved version and head..."

        set +e
        if $verbose ; then
            git diff --exit-code "$currentBranch" "$tempBranch"
        else
            git diff --exit-code "$currentBranch" "$tempBranch" >&-
        fi
        hasChanges=$?
        set -e

        if [ $hasChanges -eq 0 ]; then
            hasChanges=false
            showMessage "info" "No changes."
        else
            hasChanges=true
            if $verbose ; then
                showMessage "info" "Found changes."
            else
                showMessage "info" "Found changes. Enable the verbose mode to see the difference."
            fi
        fi

        git checkout -q "$currentBranch"
        git branch -q -D "$tempBranch"

        if $hasChanges ; then
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "fail" "$GOAL_VERSION_VALIDATION FAILED" true true
                exit 1
            elif $onlyChangeSuffix ; then
                showMessage "error" "Cannot is possible change only the version suffix, because was found changes."
                showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
                exit 1
            fi
        else
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "success" "$GOAL_VERSION_VALIDATION SUCCESS" true true
                exit 0
            elif $onlyChangeSuffix && [ "$savedVersion" != "$(formatVersion $savedVersionTime $versionSuffix)" ] ; then
                versionTime=$savedVersionTime
                version=$(formatVersion $savedVersionTime $versionSuffix)
                gitCommitTime=$savedGitCommitTime
            else
                showMessage "success" "$GOAL_VERSION_GENERATION SKIPPED" true true
                exit 0
            fi
        fi
    else
        showMessage "warning" "The \e[4m$propertiesFile\e[24m version properties file is corrupted. This file is generated automatically, do not edit it."
        if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] || [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
            showMessage "fail" "$goal FAILED" true true
            exit 1
        fi
    fi
else
    if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] || [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
        showMessage "info" "Not found the \e[4m$propertiesFile\e[24m version properties file."
        showMessage "fail" "$goal FAILED" true true
        exit 1
    elif $onlyChangeSuffix ; then
        showMessage "error" "Cannot is possible change only the version suffix, because was not found the \e[4m$propertiesFile\e[24m version properties file."
        showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
        exit 1
    fi
fi

if ! $onlyChangeSuffix ; then
    loadGitInfo
fi

showMessage "info" "Generating new version: \e[1m$version\e[0m"

saveProjectVersion "$versionTime" "$versionSuffix"

showMessage "success" "$GOAL_VERSION_GENERATION SUCCESS" true true

if $autosquash && $fixup ; then
    GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash HEAD~2
fi

if $push ; then
    if $quiet ; then
        pushOptions="-q $pushOptions"
    fi
    git push $pushOptions $pushOrigin $pushBranch
fi

if $useErrorExitCode; then
    showMessage "warning" "Using error exit code."
    exit 1
fi